{
  "openapi": "3.0.0",
  "info": {
    "title": "Comprehensive Equipment & Place API",
    "version": "1.0.0",
    "description": "API documentation for a Flask application that includes Users (with FaceIdentity storing face image data), Equipment (and sub-entities like LedLCD, Light, Door), Control actions, and Place (location) endpoints."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:5000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Home route",
        "description": "Welcome message directing to /swagger for docs.",
        "responses": {
          "200": { "description": "OK" }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a NormalUser or AdminUser based on the provided role. To register as admin, include the correct admin_token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterUser" }
            }
          }
        },
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Missing or invalid input" },
          "403": { "description": "Invalid admin token" }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "User login",
        "description": "Returns a JWT token upon successful authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginUser" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT token returned",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "400": { "description": "Missing username or password" },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/face_identity": {
      "post": {
        "summary": "Create or update FaceIdentity",
        "description": "Stores or updates the user's face identity with a face_id, name, and image data. Use multipart/form-data for file upload.",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/FaceIdentityInput" }
            }
          }
        },
        "responses": {
          "200": { "description": "Face identity saved/updated" },
          "400": { "description": "Missing required fields" },
          "404": { "description": "User not found" }
        }
      },
      "get": {
        "summary": "Get FaceIdentity",
        "description": "Retrieves the user's face identity. The face image is returned as a Base64-encoded string.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "FaceIdentity details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FaceIdentity" }
              }
            }
          },
          "404": { "description": "Face identity not found" }
        }
      }
    },
    "/places": {
      "post": {
        "summary": "Create a Place",
        "description": "Creates a new Place (room and address).",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PlaceInput" }
            }
          }
        },
        "responses": {
          "201": { "description": "Place created" },
          "400": { "description": "Invalid input" }
        }
      },
      "get": {
        "summary": "List all Places",
        "description": "Retrieves a list of all Place records.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "Array of places",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Place" }
                }
              }
            }
          }
        }
      }
    },
    "/places/{place_id}": {
      "parameters": [
        {
          "name": "place_id",
          "in": "path",
          "required": true,
          "schema": { "type": "integer" },
          "description": "ID of the Place"
        }
      ],
      "get": {
        "summary": "Get a Place",
        "description": "Retrieves a Place along with its associated equipment.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "Place details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PlaceWithEquipment" }
              }
            }
          },
          "404": { "description": "Place not found" }
        }
      },
      "put": {
        "summary": "Update a Place",
        "description": "Updates a Place's room and address.",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PlaceInput" }
            }
          }
        },
        "responses": {
          "200": { "description": "Place updated" },
          "404": { "description": "Place not found" }
        }
      },
      "delete": {
        "summary": "Delete a Place",
        "description": "Deletes the specified Place.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": { "description": "Place deleted" },
          "404": { "description": "Place not found" }
        }
      }
    },
    "/equipment": {
      "post": {
        "summary": "Create Equipment",
        "description": "Creates a new Equipment record, optionally linked to a Place.",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EquipmentInput" }
            }
          }
        },
        "responses": {
          "201": { "description": "Equipment created" },
          "400": { "description": "Missing equipment name" }
        }
      },
      "get": {
        "summary": "List all Equipment",
        "description": "Retrieves all Equipment records.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "Array of equipment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Equipment" }
                }
              }
            }
          }
        }
      }
    },
    "/equipment/{equipment_id}": {
      "parameters": [
        {
          "name": "equipment_id",
          "in": "path",
          "required": true,
          "schema": { "type": "integer" },
          "description": "ID of the Equipment"
        }
      ],
      "get": {
        "summary": "Get Equipment",
        "description": "Retrieves an Equipment record with its sub-devices.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "Equipment details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EquipmentWithSubDevices" }
              }
            }
          },
          "404": { "description": "Equipment not found" }
        }
      },
      "put": {
        "summary": "Update Equipment",
        "description": "Updates an Equipment record.",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EquipmentInput" }
            }
          }
        },
        "responses": {
          "200": { "description": "Equipment updated" },
          "404": { "description": "Equipment not found" }
        }
      },
      "delete": {
        "summary": "Delete Equipment",
        "description": "Deletes the specified Equipment record.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": { "description": "Equipment deleted" },
          "404": { "description": "Equipment not found" }
        }
      }
    },
    "/equipment/{equipment_id}/ledlcd": {
      "post": {
        "summary": "Create LedLCD",
        "description": "Creates a new LedLCD sub-device for the specified Equipment.",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LedLCDInput" }
            }
          }
        },
        "responses": {
          "201": { "description": "LedLCD created" },
          "400": { "description": "Missing name" },
          "404": { "description": "Equipment not found" }
        }
      },
      "get": {
        "summary": "List LedLCDs",
        "description": "Retrieves all LedLCD sub-devices for a given Equipment.",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of LedLCD devices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LedLCD" }
                }
              }
            }
          },
          "404": { "description": "Equipment not found" }
        }
      }
    },
    "/equipment/{equipment_id}/lights": {
      "post": {
        "summary": "Create Light",
        "description": "Creates a new Light sub-device for the specified Equipment.",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LightInput" }
            }
          }
        },
        "responses": {
          "201": { "description": "Light created" },
          "404": { "description": "Equipment not found" }
        }
      },
      "get": {
        "summary": "List Lights",
        "description": "Retrieves all Light sub-devices for a given Equipment.",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Light devices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Light" }
                }
              }
            }
          },
          "404": { "description": "Equipment not found" }
        }
      }
    },
    "/equipment/{equipment_id}/doors": {
      "post": {
        "summary": "Create Door",
        "description": "Creates a new Door sub-device for the specified Equipment.",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DoorInput" }
            }
          }
        },
        "responses": {
          "201": { "description": "Door created" },
          "404": { "description": "Equipment not found" }
        }
      },
      "get": {
        "summary": "List Doors",
        "description": "Retrieves all Door sub-devices for a given Equipment.",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Door devices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Door" }
                }
              }
            }
          },
          "404": { "description": "Equipment not found" }
        }
      }
    },
    "/controls": {
      "post": {
        "summary": "Create a Control action",
        "description": "Creates a new control action (e.g. open door, turn LED on) for the logged-in user.",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ControlInput" }
            }
          }
        },
        "responses": {
          "201": { "description": "Control created" },
          "400": { "description": "Missing required fields" }
        }
      },
      "get": {
        "summary": "List Control actions",
        "description": "Retrieves all control actions for the logged-in user.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "Array of control actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Control" }
                }
              }
            }
          }
        }
      }
    },
    "/controls/{control_id}/execute": {
      "parameters": [
        {
          "name": "control_id",
          "in": "path",
          "required": true,
          "schema": { "type": "integer" },
          "description": "ID of the Control action"
        }
      ],
      "post": {
        "summary": "Execute a Control action",
        "description": "Publishes the control action to the appropriate Adafruit IO feed.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": { "description": "Command sent successfully" },
          "400": { "description": "Unsupported device type" },
          "404": { "description": "Control not found or not owned by user" }
        }
      }
    },
    "/controls/{control_id}": {
      "parameters": [
        {
          "name": "control_id",
          "in": "path",
          "required": true,
          "schema": { "type": "integer" },
          "description": "ID of the Control action"
        }
      ],
      "put": {
        "summary": "Update a Control action",
        "description": "Updates an existing control action.",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ControlInput" }
            }
          }
        },
        "responses": {
          "200": { "description": "Control updated" },
          "404": { "description": "Control not found" }
        }
      },
      "delete": {
        "summary": "Delete a Control action",
        "description": "Deletes the specified control action.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": { "description": "Control deleted" },
          "404": { "description": "Control not found" }
        }
      }
    },
    "/admin/normal_users/{user_id}": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "schema": { "type": "integer" },
          "description": "ID of the normal user"
        }
      ],
      "delete": {
        "summary": "Delete a Normal User",
        "description": "Allows an admin to delete a normal user.",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": { "description": "Normal user deleted successfully" },
          "400": { "description": "Cannot delete an admin user" },
          "403": { "description": "Unauthorized: admin access required" },
          "404": { "description": "User not found" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterUser": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "example": "john_doe" },
          "password": { "type": "string", "example": "secret123" },
          "role": { "type": "string", "example": "user" },
          "name": { "type": "string", "example": "John Doe" },
          "account": { "type": "string", "example": "AC001" },
          "phone": { "type": "string", "example": "1234567890" },
          "action": { "type": "string", "example": "default_action" },
          "access": { "type": "string", "example": "full" },
          "admin_token": { "type": "string", "example": "mySuperSecretAdminToken123" }
        },
        "required": ["username", "password"]
      },
      "LoginUser": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "example": "john_doe" },
          "password": { "type": "string", "example": "secret123" }
        },
        "required": ["username", "password"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": { "type": "string", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        }
      },
      "FaceIdentityInput": {
        "type": "object",
        "properties": {
          "face_id": { "type": "string", "example": "FACE123" },
          "name": { "type": "string", "example": "John Doe" },
          "face_image": { "type": "string", "format": "byte", "example": "Base64EncodedImageData" }
        },
        "required": ["face_id"]
      },
      "FaceIdentity": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "face_id": { "type": "string" },
          "name": { "type": "string" },
          "face_image": { "type": "string", "format": "byte" },
          "user_id": { "type": "integer" }
        }
      },
      "PlaceInput": {
        "type": "object",
        "properties": {
          "room": { "type": "string", "example": "Room 101" },
          "address": { "type": "string", "example": "123 Main St" }
        }
      },
      "Place": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "room": { "type": "string" },
          "address": { "type": "string" }
        }
      },
      "PlaceWithEquipment": {
        "allOf": [
          { "$ref": "#/components/schemas/Place" },
          {
            "type": "object",
            "properties": {
              "equipment": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Equipment" }
              }
            }
          }
        ]
      },
      "EquipmentInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Air Conditioner" },
          "status": { "type": "string", "example": "active" },
          "place_id": { "type": "integer", "example": 1 }
        },
        "required": ["name"]
      },
      "Equipment": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "status": { "type": "string" },
          "start": { "type": "string", "format": "date-time" },
          "end": { "type": "string", "format": "date-time", "nullable": true },
          "place_id": { "type": "integer", "nullable": true }
        }
      },
      "EquipmentWithSubDevices": {
        "allOf": [
          { "$ref": "#/components/schemas/Equipment" },
          {
            "type": "object",
            "properties": {
              "led_lcds": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/LedLCD" }
              },
              "lights": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Light" }
              },
              "doors": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Door" }
              }
            }
          }
        ]
      },
      "LedLCDInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "LCD Display 1" }
        },
        "required": ["name"]
      },
      "LedLCD": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "equipment_id": { "type": "integer" }
        }
      },
      "LightInput": {
        "type": "object",
        "properties": {
          "switch": { "type": "boolean", "example": true }
        }
      },
      "Light": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "switch": { "type": "boolean" },
          "equipment_id": { "type": "integer" }
        }
      },
      "DoorInput": {
        "type": "object",
        "properties": {
          "servo": { "type": "string", "example": "open" }
        }
      },
      "Door": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "servo": { "type": "string" },
          "equipment_id": { "type": "integer" }
        }
      },
      "ControlInput": {
        "type": "object",
        "properties": {
          "action": { "type": "string", "example": "open door" },
          "device_type": { "type": "string", "example": "door" },
          "device_id": { "type": "integer", "example": 3 },
          "equipment_id": { "type": "integer", "example": 1 },
          "status": { "type": "string", "example": "pending" }
        },
        "required": ["action", "device_type", "device_id"]
      },
      "Control": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "action": { "type": "string" },
          "device_type": { "type": "string" },
          "device_id": { "type": "integer" },
          "status": { "type": "string" },
          "start_time": { "type": "string", "format": "date-time" },
          "end_time": { "type": "string", "format": "date-time", "nullable": true },
          "user_id": { "type": "integer" },
          "equipment_id": { "type": "integer", "nullable": true }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    { "BearerAuth": [] }
  ]
}
